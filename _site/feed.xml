<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sarah Chen</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 28 Jan 2018 17:50:11 -0800</pubDate>
    <lastBuildDate>Sun, 28 Jan 2018 17:50:11 -0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>Quibbles</title>
        <description>&lt;p&gt;I need to learn about ‘Message Forwarding and Method Swizzling’ today, but I just have to share a few quotes I’m reading from what is becoming my favorite book so far.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;All the Light We Cannot See&lt;/em&gt; has captivated my imagination and attention. Anthony Doerr has a way with words that captures all senses succinctly to paint an imagery as if I’m there with the characters he’s describing, living out the plot in real time as I read.&lt;/p&gt;

&lt;p&gt;In the book, a young girl who became blind experiences the world the way she knows how: through sound logic, reason, and the ability to accept her fears and see the world her own way.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The faintly metallic smell of the falling snow surrounds her. &lt;em&gt;Calm yourself. Listen.&lt;/em&gt;” - Anthony Doerr&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Too often I’m lost in the depths of my thoughts when all I need to do is take a deep breath, and take the next step forward. Here, Marie-Laure is learning how to walk with her cane. Every week her father challenges her to lead them home, and every week she gets a little better despite her frustrations and disbelief she can. Little by little, week after week she makes progress until she eventually and finds her way.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“In another half second her father’s hands are in her armpits, swinging her up, and Marie-Laure smiles, and he laughs a pure, contagious laugh, one she will try to remember all her life, father and daughter turning in circles on the sidewalk in front of their apartment house, laughing together while snow sifts through the branches above.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve fallen in love with Marie-Laure. A little girl who has all the patience in the world it seems, with a loving father who is determined to stay by her side and give her the tools to live her life the way she can. Moments like these make me fill me with warm and fuzzies. The best moments.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;“Open your eyes…and see what you can with them before they close forever.”&lt;/em&gt; - Anthony Doerr&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here’s to continuing to explore and learn; to keep plodding along. Despite the increasingly long hours I spend at work it’s honestly so exciting to see how we breathe life into a product. I feel extremely grateful to be a part of the grueling process to make something that’s so carefully researched and thought out. As for our deadline, we’ll see whether we can make it. When our deadline is set won’t determine what I’ll accomplish. I can only control what I do every day - step after step, task after task, and how I challenge myself to move faster, improve, and learn more.&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Jan 2018 23:20:26 -0800</pubDate>
        <link>http://localhost:4000/quibbles/2018/01/28/Quibbles.html</link>
        <guid isPermaLink="true">http://localhost:4000/quibbles/2018/01/28/Quibbles.html</guid>
        
        
        <category>Quibbles</category>
        
      </item>
    
      <item>
        <title>Back to Basics with Property Attributes</title>
        <description>&lt;p&gt;Some things that seem obvious to others, to me need to be studied more thoroughly. One such topic I want to focus on this week is properties.
But why Objective-C? Mainly because that’s the language we use at Facebook to build our app. And also because I want to better understand why we choose to use Objective-C rather than the ‘sexier’ Swift language.&lt;/p&gt;

&lt;p&gt;Properties are thought of as accessors to a variable in a data object.&lt;/p&gt;

&lt;p&gt;@synthesize: controls name of instance variable.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pokemon&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@synthesize&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_myType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@synthesize&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_myName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Usually we would just let the compiler automatically write the code for these methods (ie. autosynthesis). For example, the two instance variables above would instead be &lt;code class=&quot;highlighter-rouge&quot;&gt;_type&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;_name&lt;/code&gt; with autosynthesis.&lt;/p&gt;

&lt;p&gt;To prevent the compiler from synthesizing an accessor method we can use @dynamic. This tells the compiler to not create an instance variable and accessor. Instead the compiler trusts us that the variable will be available at runtime:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pokemon&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@dynamic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Property Attributes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For example: &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Atomicity&lt;/strong&gt;: By default accessors are locked to ensure atomicity.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Read/Write&lt;/strong&gt;: (readonly, readwrite) where only a getter is available for the former and a getter/setter available for the latter.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Memory-Management&lt;/strong&gt;: affects only the setter
    &lt;ul&gt;
      &lt;li&gt;assign: used for scalar types like CGFloat or NSInteger&lt;/li&gt;
      &lt;li&gt;strong: the property defines an owning relationship. I wonder if I can make this analogy. Let’s say we have six Pokemon on hand and we catch a seventh one: Gulpin. Because we are required to hold six Pokemon at all time, we first “retain” Gulpin, “release” Caterpie and set Guplin as our new sixth Pokemon. Similar to a &lt;strong&gt;strong&lt;/strong&gt; semantic when a new value is set we first retain it, release the old value, and then set the new value.&lt;/li&gt;
      &lt;li&gt;weak: property defines a nonowning relationship. When a new value is set, the new value is not retained and the old value is not released. The main difference between weak and assign is that a weak property’s value will have nilled out if the object it’s defined as is ever destroyed. (Hm I guess the Pokemon analogy doesn’t work at all. Will need to think more otherwise I’ll just be confusing myself. Shall update later).&lt;/li&gt;
      &lt;li&gt;unsafe_unretained: same as assign but indicates a nonowning relationship (unretained) that’s not nilled out (unsafe) when the target is destroyed&lt;/li&gt;
      &lt;li&gt;copy: owning relationship like strong but rather than retaining value, it copies the value. Usually used for NSString* or mutable objects to preserve encapsulation.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Method Names&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;getter=&lt;name&gt;: usually used for Bool properties to define getter name.
&lt;/name&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;didLearn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;learn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;setter=&lt;name&gt;: specifies setter name. Not usually used.&lt;/name&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Definitions I need to remember&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;To be &lt;strong&gt;Statically allocated&lt;/strong&gt; means that memory is allocated at compile time.&lt;/li&gt;
  &lt;li&gt;A &lt;strong&gt;runtime&lt;/strong&gt; is like the baker at a bakery that grabs all the ingredients (data structure, functions, memory-management methods, etc.) to mix together and bake a cake (aka the library that code is linked to to run).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Objective-C discovers object type at runtime and can be described as a messaging structure with dynamic binding.&lt;/p&gt;

&lt;p&gt;Let’s break that sentence down: Messaging structure uses dynamic binding, meaning the runtime decides which code gets executed. (Whereas languages like python has function calling which decides which code will be executed. I think?).&lt;/p&gt;

&lt;p&gt;Need to finish this up later. Time to grocery shop!&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Jan 2018 23:20:26 -0800</pubDate>
        <link>http://localhost:4000/obj-c/2018/01/21/Back-to-Basics-Properties.html</link>
        <guid isPermaLink="true">http://localhost:4000/obj-c/2018/01/21/Back-to-Basics-Properties.html</guid>
        
        
        <category>Obj-C</category>
        
      </item>
    
      <item>
        <title>Ideas to Research</title>
        <description>&lt;p&gt;Fun fact of the day: according to Pew Research Center, 77% of Americans own a smartphone of some kind. It’s more than doubled since 2011, where only 35% of Americans owned a smartphone:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/smartphone_ownership.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yay for app development? Topics I want to look more into to explore and do in my free time, if ever I find myself sitting around at home:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Objective-C Patterns and Best Practices: focus on a topic to research into with various use cases. I can finally take advantage of the books I bought to help with this:
    &lt;ul&gt;
      &lt;li&gt;Memory Management&lt;/li&gt;
      &lt;li&gt;App lifecycles&lt;/li&gt;
      &lt;li&gt;Facebook technologies (GraphQL, ComponentKit)&lt;/li&gt;
      &lt;li&gt;Design patterns: Listener/Announcer, Protocols&lt;/li&gt;
      &lt;li&gt;Basic object-oriented programming ideas&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Explore various AR app ideas
    &lt;ul&gt;
      &lt;li&gt;Premise: I recently did a fun AR app that seemed to draw people closer together by having them experience Pokemon at the same time. However it relied on providing a smartphone with a pre-downloaded app. I wonder when we’ll replace our smartphone reliance?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Graphics
    &lt;ul&gt;
      &lt;li&gt;Replicate a scene from Piper (https://fburl.com/b14u4io8)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;App ideas:
    &lt;ul&gt;
      &lt;li&gt;Sample componentKit app to build up components knowledge.&lt;/li&gt;
      &lt;li&gt;Fun compliments storage app.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 13 Jan 2018 23:20:26 -0800</pubDate>
        <link>http://localhost:4000/projects/2018/01/14/Ideas-to-Research.html</link>
        <guid isPermaLink="true">http://localhost:4000/projects/2018/01/14/Ideas-to-Research.html</guid>
        
        
        <category>Projects</category>
        
      </item>
    
      <item>
        <title>Next Steps</title>
        <description>&lt;p&gt;Ever since I moved back to California, I’ve been itching to find something fulfilling to do in my free time. I want the knowledge I have and am learning to be useful for others and myself. I want to figure out how to best help others with what I know.&lt;/p&gt;

&lt;p&gt;It’s always this question of how to best use what I know to help others that sits in my mind. How do I determine the correct balance between giving back, and taking the time for myself to develop more substantial knowledge and skills? I aim to always be a life-long learner and teacher, but I often find myself asking - what’s the most optimal route to take?&lt;/p&gt;

&lt;p&gt;I need to set aside time to reflect more often and compile what I have learned together with the prospect of answering these questions; it is too easy to fall into the habit of taking what I have for granted. I need to remember how grateful I am for being able to afford to live in the Bay area, how grateful I am to be working for one of the top companies in my field, with one of the best teams, and on one of the most exciting projects. I am grateful for being able to learn more and improve myself, every day. I am grateful.&lt;/p&gt;

&lt;p&gt;And yet I constantly find myself complaining about the traffic, the lack of affordable housing, the tech bubble that seems suffocating at times. But every moment I have no matter where I am is an opportunity to learn from others, and to become more inspired by others and their dreams. Being in the center of the tech industry, information overload occurs all the time with the vast amount of people and talent. But I should recognize that as an opportunity to take advantage of rather than complain and hide behind my insecurities of not knowing enough. I need to remember to keep moving forward and to continue to learn more from those around me.&lt;/p&gt;

&lt;p&gt;It’s easy to become lost in the flow of time; to be controlled by deadlines, team meetings, bugs filed, and pinging notifications. But the need to sit back and think about all I’ve done and learned is a higher priority.&lt;/p&gt;

&lt;p&gt;Here’s to taking control of time.&lt;/p&gt;

&lt;p&gt;What’s next? A journal to keep track of lessons learned; what I’m reading, and how to apply it to improving my daily life. What I’ve learned from the book I’m currently reading is to set deadlines for myself to keep myself honest. Dan Ariely describes in &lt;em&gt;Predictably Irrational&lt;/em&gt; how I should expect my future self to procrastinate. Thus to combat my future self my present self needs to provide a strict deadline to keep up with.&lt;/p&gt;

&lt;p&gt;Here’s to beginning to update my website once a week every Sunday morning. Hats off to another chapter.&lt;/p&gt;

&lt;p&gt;Cheerios,
Sarah&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Jan 2018 23:20:26 -0800</pubDate>
        <link>http://localhost:4000/reflections/2018/01/13/Next-steps.html</link>
        <guid isPermaLink="true">http://localhost:4000/reflections/2018/01/13/Next-steps.html</guid>
        
        
        <category>Reflections</category>
        
      </item>
    
      <item>
        <title>Gotta Catch 'em All</title>
        <description>&lt;p&gt;It’s been a while since I’ve posted and I feel I owe it to myself to explain what I’ve been up to in order to figure out if I can prevent such a long delay from occurring again. A lot has happened in the past few weeks since I last worked on my side project. Unfortunately I was in the middle of writing a post describing learning about dialectrics that work got much busier than expected. A good busy of course! My project proposal at work was approved and I had to juggle defining the vision of the new project, being team lead, teaching scrum master responsibilities to the next scrum master, and developing for both projects I was in charge of.&lt;/p&gt;

&lt;p&gt;The really awesome part though, was that I was also able to continue an Pokemon augmented reality project I’d been working on with two others at work; first as an event for IBM’s “Take Your Kid’s to Work Day,” then at talks for local charter schools, and just this past Tuesday, at &lt;a href=&quot;http://sxswedu.com/expo&quot;&gt;SXSW’s Education Exposition&lt;/a&gt; by participating in &lt;a href=&quot;https://www.tealsk12.org/&quot;&gt;TEALS’ Science Fair&lt;/a&gt;. TEALS stands for Technology Education and Literacy in Schools and helps promote computer science education courses in high schools. A huge passion of mine is to encourage and drive STEM education for K-12 public schools because I believe access to STEM drives more opportunities. STEM is growing at a rapid pace, and we need our future leaders, engineers, scientists, teachers and young professionals to be on the forefront of that change, earlier on. So what way is better than inspiring students into STEM through Pokemon? Makes it fun for both me and the audience.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pokemil/sxsw_edu_expo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I worked with a designer who provided the 3D models and animation, and another engineer who introduced me to coding augmented reality games with Unity and Vuforia SDK. I added a shader to the 3D models to make sure the objects looked more like cartoons; otherwise the color was slightly off. When I added a shader though, I realized how similar all of the concepts were to the Ray Tracing project I had picked up! Depending on the albedo, and the number of light sources, the color of the 3D object differed. Taking into account that we had only one light source, and that handy toon shaders could be imported into the Unity project, I was happy to find how more realistic the Pokemon looked after the shader was applied.&lt;/p&gt;

&lt;p&gt;Before a shader was applied:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pokemil/pikachu_preshader.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the shader was applied:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pokemil/pikachu_postshader.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Putting everything together with the animation the designer gave us, the image recognition of the vinyl print in order to display the 3D object (Pikachu), here’s one of the Pokemon we were able to show at the SXSW Education Exposition:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pokemil/ar_demo.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Overall the demo was a blast. We had three vinyl prints that represented three different Pokemon: Pikachu, Bulbasaur, and Mew. The students loved it, the parents loved it, the educators, after hearing my (and all the other IBM volunteers I was able to convince to come) spheal about how important AR could be within education, loved it. At first parents and educators were curious why we were at the exposition demonstrating a seemingly random AR game. However, augmented reality apps and games, similar to virtual reality, have the power to change how students will learn in the future.&lt;/p&gt;

&lt;p&gt;Imagine having similar icons to the vinyl print we created, placed in a textbook. A student points their phone into the textbook at the icon. The chapter is about animal cells and cell parts. Imagine students taking apart a cell, and discovering again what scientists had discovered in a lab, but in a classroom with their friends! Simply awe-inspiring. The concepts would be more intriguing as students would be relating to the experience first-hand, and hopefully as a result of being more intriguing, the idea behind the different parts of a cell would be better remembered. Of course, this is all from my perspective as an engineer and student. The actual implementation would be different, but the vision and goal to aim for is what I believe is unique.&lt;/p&gt;

&lt;p&gt;In terms of how we used the AR demo to encourage students towards STEM education, I asked students who were captivated by the Pokemon, what they want to build, what their favorite games were, what their favorite subjects were, and what they loved to do. I showed them how they could relate their passion for Pokemon, gaming, shopping, drawing, and marine biology to the AR game we made, and what we do at IBM. My main goal for attending and ensuring IBM had a presence at the SXSW Education Exposition, was to help students see that you don’t have to have the pre-conceived notion of an “engineering” or “science” mind to be an engineer or a creator. You don’t have to fit into any of the boxes people commonly portray programmers or computer scientists or innovators into. Instead, I wanted to help people see that everything is connected - and the passion to follow what you love, is the most important. (Aside from practicality and reality). The ability to dream and continue exploring was something I wanted to relate to everyone there.&lt;/p&gt;

&lt;p&gt;A 6-year old kid tried to peek behind the phone to see if Bulbasaur was hiding behind it. As he realized nothing was there, he looked back at the screen and yelped in delight again as he saw Bulbasaur again. He tried to hold out his hand to touch Bulbasaur, to locate where he was on the map; only to find his hand again with Bulbasaur in the background! He repeated the same actions again, and looked up in surprise. Right then and there, his look to me and the sparkle and hint at magic made all the hours I put into improving, debugging and testing the app, printing vinyl prints and coordinating volunteer efforts, worth it. Here’s to creating more magical moments for people to experience.&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Mar 2017 23:20:26 -0800</pubDate>
        <link>http://localhost:4000/reflections/projects/2017/03/12/Gotta-Catch-Em-All.html</link>
        <guid isPermaLink="true">http://localhost:4000/reflections/projects/2017/03/12/Gotta-Catch-Em-All.html</guid>
        
        
        <category>Reflections</category>
        
        <category>Projects</category>
        
      </item>
    
      <item>
        <title>Abstract Different Materials</title>
        <description>&lt;p&gt;Getting to the real meat/exciting part of the project. By creating Metal and Lambertian materials, I learned how each material interacts with rays.&lt;/p&gt;

&lt;p&gt;Taking into account the point a ray hits a sphere, let’s say &lt;em&gt;N&lt;/em&gt; is the Normal of the point. A reflected ray’s unit vector &lt;em&gt;v&lt;/em&gt; will have the direction &lt;em&gt;(v + 2B)&lt;/em&gt;, where &lt;em&gt;B&lt;/em&gt; is the dot product of the vector &lt;em&gt;v&lt;/em&gt; and the hit point’s normal &lt;em&gt;N&lt;/em&gt;. The results in the projection of the normal vector onto the ray, as seen with the following code:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SubtractVector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MultiplyNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the other hand, lambertian materials diffuse rays. Light is reflected at many angles, so we depict this through randomizing how the ray is scattered:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddVector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddVector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RandomInUnitSphere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scattered&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Direction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SubtractVector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Modifying &lt;code class=&quot;highlighter-rouge&quot;&gt;main.go&lt;/code&gt; to take into various materials of spheres, and adding fuzzier reflections for larger spheres, we’re given the following image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/fuzz1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Jan 2017 10:34:26 -0800</pubDate>
        <link>http://localhost:4000/projects/2017/01/24/Abstract-different-materials.html</link>
        <guid isPermaLink="true">http://localhost:4000/projects/2017/01/24/Abstract-different-materials.html</guid>
        
        
        <category>Projects</category>
        
      </item>
    
      <item>
        <title>Adding Materials to Objects</title>
        <description>&lt;p&gt;In order to take out the jagged edges of the sphere as seen in the last post, the edge pixels must be a blend of the foreground and background. This is done by averaging samples of each material in each pixel. For each pixel, there are several samples within that pixel. Then send rays through each sample. The colors of these rays are averaged.&lt;/p&gt;

&lt;p&gt;This difference allows the blending of edge pixels (pixels in between the background and the foreground) as seen in the comparison between the picture from last chapter and the picture after averaging the pixel colors.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/out5out6_comparison.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As I moved onto creating more things within the images, I learned to create objects and materials. The fun ensued. More progress and cooler pictures were formed!&lt;/p&gt;

&lt;p&gt;The following pictures are examples of diffuse objects that take on the color of their surroundings, adjusted for their own intrinsic color. As Peter Shirley explains in his book, “Light that reflects off a diffuse surface has its direction randomized.” At the same time, the darker the surface is, the more likely absorption is.&lt;/p&gt;

&lt;p&gt;The algorithm to create this is as follows (somewhat summarized):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Pick a random point &lt;em&gt;s&lt;/em&gt; on a unit radius sphere tangent to the hitpoint. Send a ray from the hitpoint &lt;em&gt;p&lt;/em&gt; to the random point &lt;em&gt;s&lt;/em&gt;. The sphere then has center (p+N), where &lt;em&gt;N&lt;/em&gt; is the length of the ray.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next Peter Shirley notes:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Pick a random point in a unit radius sphere &lt;em&gt;centered at the origin&lt;/em&gt; (rather than tangent to the hitpoint) by using a &lt;em&gt;rejection method&lt;/em&gt;. Pick a random point in the unit cube where &lt;em&gt;x, y&lt;/em&gt; and &lt;em&gt;z&lt;/em&gt; range from -1 to +1, rejecting all points that do not fall within the sphere.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rejection method is a technique used to generate observations from a distribution.&lt;/p&gt;

&lt;p&gt;The described method gives us the following image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/out7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After we adjust for the image to be ‘gamma corrected’, we see a light gray color in the image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/out8.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Apparently the above picture hosts a “shadow acne problem.” In other word pimply splotches due to rays reflecting off of not at exactly t = 0, but instead at t being very close to zero. In order to remove the “shadow acne problem” we have to better specify to ignore hits very near zero, resulting in the following picture:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/out8-without-pimples.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Jan 2017 10:34:26 -0800</pubDate>
        <link>http://localhost:4000/projects/2017/01/17/Adding-Materials-to-Objects.html</link>
        <guid isPermaLink="true">http://localhost:4000/projects/2017/01/17/Adding-Materials-to-Objects.html</guid>
        
        
        <category>Projects</category>
        
      </item>
    
      <item>
        <title>Debugging and Chapter 5</title>
        <description>&lt;p&gt;So it turned out my bug was including the name of the interface within my struct. So for example, I had:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HitableList&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hitable&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hitable&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListSize&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, when I initialized the &lt;code class=&quot;highlighter-rouge&quot;&gt;HitableList&lt;/code&gt; object, I would leave the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hitable&lt;/code&gt; property uninitialized with &lt;code class=&quot;highlighter-rouge&quot;&gt;HitableList(List: list, ListSize: size)&lt;/code&gt;. This would then create the value: &lt;code class=&quot;highlighter-rouge&quot;&gt;{&amp;lt;nil&amp;gt; [{ {0 0 -1} 0.5} { {0 -100.5 -1} 100}] 2}&lt;/code&gt;that resulted in the nil pointer dereference error I had received. At the same time, I’m not really sure why the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hit&lt;/code&gt; function would have ever accessed these &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; values. In any case, once I removed all the extraneous &lt;code class=&quot;highlighter-rouge&quot;&gt;Hitable&lt;/code&gt; properties in all the objects I had, I was able to produce this (wrong) image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/out5bug.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As I added print statements into my &lt;code class=&quot;highlighter-rouge&quot;&gt;color&lt;/code&gt; function to better understand why the sphere wasn’t being created, I realized my &lt;code class=&quot;highlighter-rouge&quot;&gt;HitRecord&lt;/code&gt; object kept getting created. Thus I had to modify my functions and function calls to pass by reference to make sure the record of the surface normals on the object would be recorded and tracked, thereby producing the following final image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/out5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Jan 2017 10:34:26 -0800</pubDate>
        <link>http://localhost:4000/projects/2017/01/13/Debugging-and-Chapter-5.html</link>
        <guid isPermaLink="true">http://localhost:4000/projects/2017/01/13/Debugging-and-Chapter-5.html</guid>
        
        
        <category>Projects</category>
        
      </item>
    
      <item>
        <title>Refactoring and jotting notes about go</title>
        <description>&lt;p&gt;I hit somewhat of a rut after refactoring. I ran into this error message after implementing a &lt;code class=&quot;highlighter-rouge&quot;&gt;hitable&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;hitableList&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;sphere&lt;/code&gt; objects for the ray tracer:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go run main.go &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; assets/out5.png
panic: runtime error: invalid memory address or nil pointer dereference
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;signal SIGSEGV: segmentation violation &lt;span class=&quot;nv&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x1 &lt;span class=&quot;nv&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x20 &lt;span class=&quot;nv&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x5efd3]

goroutine 1 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;running]:
panic&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x92420, 0xc42000a0c0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	/usr/local/Cellar/go/1.7.4_1/libexec/src/runtime/panic.go:500 +0x1a1
golang-ray-tracer/objects.&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;HitableList&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.Hit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xc420014180, 0x0, 0x0, 0x0, 0xc000000000000000, 0x3fef5c28f5c28f5c, 0xbff0000000000000, 0x0, 0x7fefffffffffffff, 0x0, ...&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&amp;lt;autogenerated&amp;gt;:2 +0x53
main.color&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x0, 0x0, 0x0, 0xc000000000000000, 0x3fef5c28f5c28f5c, 0xbff0000000000000, 0xfa1c0, 0xc420014180, 0xc42000a2c0, 0x6, ...&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	/Users/sarahchen/Documents/go/src/golang-ray-tracer/main.go:14 +0xdb
main.main&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
	/Users/sarahchen/Documents/go/src/golang-ray-tracer/main.go:51 +0x4c6
&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;status 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thus the lack of coding the past few days. Though having to return to work this week also impeded progress. In any case, while this error means my program’s unable to access the list I created within my &lt;code class=&quot;highlighter-rouge&quot;&gt;HitableList&lt;/code&gt; data structure, instead of trying to do a quick fix, I really need to go back to the basics and figure out what I’m doing in my code.&lt;/p&gt;

&lt;p&gt;In other words I need to learn what rendering objects means.&lt;/p&gt;

&lt;h2 id=&quot;referencing-scratchapixel&quot;&gt;Referencing scratchapixel.&lt;/h2&gt;

&lt;p&gt;Color and brightness is depicted through how light interacts with an object’s materials. Light contains photons that can be absorbed, reflected or transmitted by an object. The percentage of photons absorbed, reflected and transmitted determines how objects appear in a scene.&lt;/p&gt;

&lt;p&gt;White light contains red, blue and green photons. The color red appears when green and blue photons are absorbed. The red photons reflect the object and allows our eyes to see the object. Each point on an object reflects light rays in different direction. Our eyes’ photoreceptors then converts light into neural signals for our brains to interpret.&lt;/p&gt;

&lt;h2 id=&quot;learning-go&quot;&gt;Learning Go&lt;/h2&gt;

&lt;p&gt;Struct is a type that contains named field.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; introduces a new type, followed by the name of the type (Circle). &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; keyword indicates we’re defining a &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; type and a list of fields inside the curly braces.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pi&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Go automatically passes a pointer into this method without the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; operator&lt;/p&gt;

&lt;h1 id=&quot;pointers&quot;&gt;Pointers.&lt;/h1&gt;

&lt;p&gt;If there’s one thing I learned about Go and C, it’s that pointers are friends. Especially in custom structs. If you take a look at the Objects created in my last &lt;a href=&quot;https://github.com/schen22/golang-ray-tracer/tree/1aed656e8772ae35d032e6638ba254aa84c28719&quot;&gt;push&lt;/a&gt;, you can see how I had to call the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hit&lt;/code&gt; function by reference in order for the &lt;code class=&quot;highlighter-rouge&quot;&gt;HitRecord&lt;/code&gt; struct to modify the values of its properties without creating a new object.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sphere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_min&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_max&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HitRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Similarly, in the &lt;code class=&quot;highlighter-rouge&quot;&gt;HitableList&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Hitable&lt;/code&gt; interface, I needed to pass in a reference to the &lt;code class=&quot;highlighter-rouge&quot;&gt;HitRecord&lt;/code&gt; rather than create new objects that don’t store or allow the object to act as a record to whether the object is hittable.&lt;/p&gt;

&lt;p&gt;Talking about it now makes it seem like a noobish mistake, but lesson learned! Pointers are friends :)&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Jan 2017 07:56:26 -0800</pubDate>
        <link>http://localhost:4000/go/projects/2017/01/05/Jotting-notes-about-go.html</link>
        <guid isPermaLink="true">http://localhost:4000/go/projects/2017/01/05/Jotting-notes-about-go.html</guid>
        
        
        <category>Go</category>
        
        <category>Projects</category>
        
      </item>
    
      <item>
        <title>Chapter Three: Rays, a simple camera and background</title>
        <description>&lt;p&gt;For the longest time I was stuck on this bug where the gradient was off. I couldn’t figure it out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/out2-bug.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I went over my code in &lt;code class=&quot;highlighter-rouge&quot;&gt;main.go&lt;/code&gt; in the way I understood it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Begin the gradient background in the lower left corner: (-2, -1, -1). Define the width and height of the background to 4 and 2 units; respectively. Represent with the vectors: &lt;code class=&quot;highlighter-rouge&quot;&gt;{4, 0, 0}&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;{0, 2, 0}&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;For each pixel between the coordinates, scale the ray of light with the horizontal and vertical vectors that are scaled incrementally with the magnitudes u, v.&lt;/li&gt;
  &lt;li&gt;Form the ray with the direction of the added horizontal, vertical scalars.&lt;/li&gt;
  &lt;li&gt;Find the color of the ray by finding its unit vector and scale the magnitude by the y-coordinate that’s bounded by [0, 1].&lt;/li&gt;
  &lt;li&gt;Form a linear interpolation between blue (0.5, 0.7, 1.0) to white (1.0, 1.0, 1.0) and compute the resulting vector from the direction.&lt;/li&gt;
  &lt;li&gt;Convert the color vector into RGB values and print out.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I finally realized I had a problem of variable shadowing where I was overriding the values of my horizontal and vertical vectors within my for loops.&lt;/p&gt;

&lt;p&gt;After fixing the error, I received the expected output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/out2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Onwards to Chapter 4 now! Adding a sphere. Maybe I’ll add more to this post later.&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Dec 2016 19:18:26 -0800</pubDate>
        <link>http://localhost:4000/projects/2016/12/27/Chapter-Three-Rays-Simple-Camera-Background.html</link>
        <guid isPermaLink="true">http://localhost:4000/projects/2016/12/27/Chapter-Three-Rays-Simple-Camera-Background.html</guid>
        
        
        <category>Projects</category>
        
      </item>
    
  </channel>
</rss>
