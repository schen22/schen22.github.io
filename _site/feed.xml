<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sarah Chen</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 22 Jun 2018 11:13:10 -0700</pubDate>
    <lastBuildDate>Fri, 22 Jun 2018 11:13:10 -0700</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>Nuggets</title>
        <description>&lt;p&gt;I wanted to share nuggets of wisdom from various people I’ve been meeting up within the industry. The primary questions I’ve been asking are what drives their confidence, what their journey entails, and what the most pivotal moment of their career has been so far. It was fascinating to learn and observe how everyone has their own style, work ethic and drive; and yet they all attained a relative degree of success and satisfaction that they wanted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nugget #1: Optimize for happiness.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For me, this translates to building something useful for others: share warm and fuzzies, allow others to feel that they belong, and give people a platform to be heard by recognizing every person has a voice they can use. Facebook has the power to accomplish this, but more on this later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nugget #2: Believe in yourself.&lt;/strong&gt; Continue doing what needs to be done, and the rest will follow.&lt;/p&gt;

&lt;p&gt;My mentor resolves conflicts by being so good others are unable to ignore them. Of course, it helps that my mentor loves to build and solve problems. Truly an inspiration for me to keep learning from. :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nugget #2.5: Trust yourself.&lt;/strong&gt; You’ll become better at estimating and setting deadlines. Tell your manager what the unknown factors are and add a little more time into how long you think it might actually take.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nugget #3: Break things to learn!&lt;/strong&gt; Break apart small pieces to figure out what makes a solution work. For any challenge you’re facing, someone has probably already built a solution or something that’s similar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nugget #4: Keep on moving forward.&lt;/strong&gt; As long as you don’t hate what you’re doing and don’t hate your team - keep at it. There’s always a better way to do something, and you should always recognize that. But don’t beat yourself up for not implementing the perfect solution right off the bat. Recognize that there’s always a better way to build what you’re building, but also recognize that you’ve gotten better, you’ve improved, and that you’ve learned.&lt;/p&gt;

&lt;p&gt;My mentor encouraged me to look back at old code I’ve written, then realize that I probably wouldn’t have written it that way if I were to do it again. And that’s progress.&lt;/p&gt;

&lt;p&gt;After meeting up with multiple people, I also realized it’s not just advice I was looking for. I was looking for some way to find myself and find my own drive, intuition, and confidence. But at some point I just have to tune out the self-doubt I have in order to focus on what’s next. Just keep moving forward and the path will follow.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jun 2018 18:20:26 -0700</pubDate>
        <link>http://localhost:4000/reflections/advice/2018/06/18/Nuggets.html</link>
        <guid isPermaLink="true">http://localhost:4000/reflections/advice/2018/06/18/Nuggets.html</guid>
        
        
        <category>Reflections</category>
        
        <category>Advice</category>
        
      </item>
    
      <item>
        <title>Day 0</title>
        <description>&lt;p&gt;It’s been awhile again but I’ve been feeling a bit burnt out from work. Thus the need to force myself to reflect more often! So guiding questions if not for today, for every day:&lt;/p&gt;

&lt;p&gt;What are three things that made me happy today? (I declare these warm and fuzzies).&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spending a late Sunday night playing board games spontaneously with friends while making Yu-Gi-Oh jokes to ‘trust in the heart of the cards’ and d-d-d-d-d-d-d-duel! Spontaneity I feel is harder to come by as years pass, so I lean more into the moment and appreciate how and when it happens.&lt;/li&gt;
  &lt;li&gt;Chatting with my grandma, exchanging gossip and being able to remind her that I’ll see her soon.&lt;/li&gt;
  &lt;li&gt;Seeing the California skyline - backdrop of mountains with a splatter of blue accented white background. California is beautiful and the scenic landscape definitely brought a smile to my face as I was driving down 237 today.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don’t have much on my mind lately which worries me. The one thing I don’t want to become is a mindless worker bee that fulfills the expectations and plans passed down from above. Time passes without me realizing, and within a blink of an eye it’s already been almost a year since I’ve moved to the bay area. That frightens me, so how can I take back the reigns and take control of what happens daily? What’s my next step?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hobbes_weird.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Step 1. Lean into what I know – time to start tinkering and put the anime away!&lt;/p&gt;

&lt;p&gt;Step 2. Idea pot - quick, jot down all the things that come to mind within a minute:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Convert all the photos that get shared on Messenger in my family group chat into an album for my family to search through. Add in some photo recognition technology to allow people to easily search by date, place, name/nickname.&lt;/li&gt;
  &lt;li&gt;Happiness jar that lets me jot down notes or special moments that make me happy every day for me to look back on. The goal is to help motivate through rough patches and remind myself just how beautiful life is.&lt;/li&gt;
  &lt;li&gt;Create one frame of an animation you love. (Though tbh this has been on my mind for awhile, but it seems so difficult I haven’t really looked much into it.)&lt;/li&gt;
  &lt;li&gt;Running journal - the one I mentioned a while back but never finished LOL.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 3. I’m making this up here - so I’m assuming this step should be a plan of action to commit to. Do what I love and ignore all of the wanted accolades, awards, recognition, whatever that puts unnecessary stress on myself. I can only control what I do, and how I feel about myself.&lt;/p&gt;

&lt;p&gt;I’m not too sure what should or will come of this, but I hope I’ll create a project some time soon on Github. I like the idea of a happiness jar honestly. Should be a fairly straightforward thing to make - I’ll put up some prototypes and get to work.&lt;/p&gt;

&lt;p&gt;Lastly, I challenge myself this week to ask to grab lunch with one of my role models at work. One of my coworkers I highly admire recently left. Regrettably I wasn’t able to say my farewells and thank you’s in person because I chickened out. I honestly can’t remember the last time I’ve been so timid at work to the point where I regret not doing something so badly. I don’t want that to happen again - thus this challenge. Like spontaneity, I need to lean in to my fear. And with that, the quote of the day is:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“The most difficult thing is the decision to act, the rest is merely tenacity. The fears are paper tigers. You can do anything you decide to do. You can act to change and control your life; and the procedure, the process is its own reward.” - Amelia Earhart&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 20 May 2018 00:20:26 -0700</pubDate>
        <link>http://localhost:4000/quibbles/reflections/2018/05/20/Day-0.html</link>
        <guid isPermaLink="true">http://localhost:4000/quibbles/reflections/2018/05/20/Day-0.html</guid>
        
        
        <category>Quibbles</category>
        
        <category>Reflections</category>
        
      </item>
    
      <item>
        <title>Adventure Time</title>
        <description>&lt;p&gt;There’s more to life than solely success.&lt;/p&gt;

&lt;p&gt;The pursuit of happiness; the desire to see who others are for who they are. To recognize that everyone is fighting their own battles. We are who we are, and although it’s simple enough to say, to truly always be accepting of others and of myself is so much more challenging.&lt;/p&gt;

&lt;p&gt;This past weekend I had the amazing opportunity to travel to New York. Call it a whim - but it’s helped me open my eyes even more.&lt;/p&gt;

&lt;p&gt;It’s so easy to get caught up in everyday life. I know I’ve reflected on this before already. But I still haven’t learned a good handle on how to remind myself to enjoy where I am. I have a tendency to rush through the things I do because I’m impatient to get to the next step, to get to the next level, to get to the next stage of my life.&lt;/p&gt;

&lt;p&gt;People always tell me - enjoy where you are now because you only live your life once. #yolo.&lt;/p&gt;

&lt;p&gt;But I always disliked that piece of advice. It made me feel as if they know something about where they are now, that I don’t. That they’ve already overcome challenges that I have yet to even know about - and who likes feeling left out?&lt;/p&gt;

&lt;p&gt;But it’s so easy to forget how beautiful and wonderful life is. How every single moment, every challenge is precious and unable to be repeated. I could argue that there’s a diminishing margins of returns to everything that I do, and another side could argue the inevitable “it depends.”&lt;/p&gt;

&lt;p&gt;I brought up New York because I discovered there’s so much more of the world that I have yet to see. Even though it wasn’t my first time there (I hated my first visit there for the record), I was fascinated by how I was able to walk down the street and neither understand nor recognize any of the languages being spoken. Given, I was walking down a pretty touristy area right next to Wall Street; but I was amazed by the diversity of the people. I kept waiting, smiling at my stupid excitement, waiting for some couple or some family or some group of people or some one to walk by and speak english - but no one did. And how I loved it.&lt;/p&gt;

&lt;p&gt;There’s so much more to life than I can even dream about. Tell that to five year old me and you’d catch me staring back at you with the answer, “but I like the candy I dream about.” The beyond and the unknown used to scare me; but it’s exciting and motivating. I want to see the world’s wonders and challenge the scope of how I view the world. I want to continue to have these paradigm shifts. I want to hear people’s stories. I don’t think traveling is the answer, but it’s one of the means. I think more importantly is the desire for me to see and to listen. To push myself out of my comfort zone and to socialize more with people.&lt;/p&gt;

&lt;p&gt;This reminds me of a conversation I had with a friend of mine recently. He asked me, “How do you work so hard and stay motivated?” I looked at him, amazed that he even thought I worked hard. And further, “What’s your end goal?”&lt;/p&gt;

&lt;p&gt;I don’t know. But I think we make people who we think they are in our minds. That’s not to say that his opinion of me isn’t true or justified. My point isn’t about the validity of the statement or to even answer the question, but to remark how the way I see myself isn’t the way how others see me and vice versa. It’s fascinating to me how the human mind works. Questions, the desire to know how others think and do; the desire to understand and learn more. It helps make connections and establish a common ground to walk together though.&lt;/p&gt;

&lt;p&gt;The fact that we all come from different walks of life and yet are so troubled by our own problems we forget that sometimes the answer lies in simply talking to others.&lt;/p&gt;

&lt;p&gt;“Be the change you wish to see in the world.” - Mahatma Gandhi. My sister used to wear this shirt all the time; maybe to help advertise people to join the high school JSA club advertised on the front of the shirt. (kidding). I think we all aspire to be more - to make a difference and assert our place in the world.  I think we all have the desire to be someone - someone to be remembered, someone who’s invaluable, someone who feels as if they belong and are needed.&lt;/p&gt;

&lt;p&gt;(Rambling again. But some in literature could call it a stream of consciousness. I don’t recommend that book by James Joyce by the way. The stream of consciousness was terrible to follow).&lt;/p&gt;

&lt;p&gt;I’m just beginning my own journey and I’m so truly excited for what’s to come because where I’m at now. By golly gosh darn. Life’s simply amazing because I allow it to be.&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Mar 2018 23:20:26 -0800</pubDate>
        <link>http://localhost:4000/quibbles/reflections/2018/03/04/Adventure-Time.html</link>
        <guid isPermaLink="true">http://localhost:4000/quibbles/reflections/2018/03/04/Adventure-Time.html</guid>
        
        
        <category>Quibbles</category>
        
        <category>Reflections</category>
        
      </item>
    
      <item>
        <title>How to define success</title>
        <description>&lt;p&gt;I’ve decided I want to define success more concretely, and I happened upon a great read this past weekend that inspired this redefinition. Rather than to be defined or (what I feel at times) restricted to the job I have, the role I play on my team, or the lines of code I write a day, I want to define success on the basis of the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the number minutes I spend running every day in order to stay healthy and do all the things I want to do in life.&lt;/li&gt;
  &lt;li&gt;the number of times I laugh or enjoy the conversations I have by staying present and open-minded to situations around me.&lt;/li&gt;
  &lt;li&gt;the number of minutes I spend on the phone with my parents because I care about my family.&lt;/li&gt;
  &lt;li&gt;the number of times I speak up among a group of people in order to remember I have a voice.&lt;/li&gt;
  &lt;li&gt;the number of lessons learned to satisfy my love of learning and desire to understand.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Health, presence, family, attitude and aptitude. Suffice it to say I think these can act as goals to ground me throughout the day to concentrate more on what I want to do, and less on what I do.&lt;/p&gt;

&lt;p&gt;While there’s no measure that I can compare myself to just yet, I can create some type of iPython notebook to track (at the very least) physical exercise. I’ve been wanting to get a little more in data analysis. And plus I’m signed up for the half marathon so honestly I should be running more than the 2-3 miles I get. THREE BIRDS WITH ONE STONE! Oh wait, four! Because this way I can guarantee comparisons of myself to me (rather than others).&lt;/p&gt;

&lt;p&gt;Now though, I’m wondering how do these definitions of success relate to the goals that I have at work?&lt;/p&gt;

&lt;p&gt;I guess to put a different spin on it: in order to learn more, I have to review more code, and ask questions to code more effectively. In a way, the more I do, the more I learn. So by the communicative property, if learning comes first, inherently, the goals or expectations set at work will follow. I think the most important lesson I’ve learned is, “Me first.” Because honestly there’s no one else that will ever do so, nor would I want them to. I have to own my own way and what I do. To do this I have to be comfortable with putting myself first.&lt;/p&gt;

&lt;p&gt;This doesn’t mean I should become a jackass or some arrogant coworker who only thinks of what I want and ignores all else. I still have my values to keep me in check for that thankfully. Rather, it’s more I want to focus on what I want to accomplish, how to get to where I want to go; rather than to concentrate on how others are doing or give in to the norm. For example the other day at Costco there was this couple that cut in front of me. And rather than speaking up, I just stood there silently and took it. While this may be an extreme example, it’s been aggravating me that I hadn’t spoke up.&lt;/p&gt;

&lt;p&gt;But at the same time that’s okay because I can take it as a learning experience. I just need to practice what I should say in these settings because I’m not used to that happening to me. (I mean come on, I’m a cute Asian girl; who can ignore me :P). In any case, next time I’m prepared to say, “Excuse me sir/miss, I was already here in line,” and then give them a chance to explain themselves. If they’re in some sort of emergency then by all means take my spot; but I shouldn’t let people take advantage of me.&lt;/p&gt;

&lt;p&gt;Random other goals I’ll update at another time but want to jot down for now:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I want to increase my circle of influence.&lt;/li&gt;
  &lt;li&gt;I want to go backpacking or camping in the mountains.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cheerios,&lt;/p&gt;

&lt;p&gt;Sarah&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The world needs dreamers and the world needs doers. But above all, the world needs dreamers who do.&lt;/em&gt; - Sarah Ban Breathnach&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Feb 2018 23:20:26 -0800</pubDate>
        <link>http://localhost:4000/quibbles/reflections/2018/02/05/How-to-define-success.html</link>
        <guid isPermaLink="true">http://localhost:4000/quibbles/reflections/2018/02/05/How-to-define-success.html</guid>
        
        
        <category>Quibbles</category>
        
        <category>Reflections</category>
        
      </item>
    
      <item>
        <title>Subclassing and Alternatives</title>
        <description>&lt;p&gt;Sunday learning for today has taken me longer than usual. At the same time I think it’s quite necessary to understand these various patterns that come across often: subclass, protocol, delegation, configuration objects, composition.&lt;/p&gt;

&lt;p&gt;Subclassing by itself seems to make sense; but I get mixed up when I look at protocol and delegation together. But first let’s stick with what I’ve found out about subclassing and I’ll save comparing the two patterns for next time.&lt;/p&gt;

&lt;p&gt;Class clusters hide implementation details behind abstract classes. However, because objective-c has nothing to label classes as ‘abstract,’ convention is therefore found in the docs. (Which honestly I find pretty arbitrary and confusing..) Class clusters is a type of factory pattern that defines all the necessary logic those that inherit the base class must implement. In other words: subclasses can override default implementation of base classes. Here’s an example of a subclass with my favorite example using Pokemon:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Abstract base class&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NS_ENUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PokemonType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PokemonTypeWater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PokemonTypeFire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PokemonTypeGrass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pokemon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSUInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pokemon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pokemonWithType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PokemonType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Subclass&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PokemonWater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pokemon&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PokemonWater&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;waterGun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the subclass example, &lt;code class=&quot;highlighter-rouge&quot;&gt;attack&lt;/code&gt; method is required to implement Pokemon. When checking for equality between subclasses, use &lt;code class=&quot;highlighter-rouge&quot;&gt;isKindOfClass:[Pokemon class]&lt;/code&gt; method rather than comparing with &lt;code class=&quot;highlighter-rouge&quot;&gt;[Pokemon class]&lt;/code&gt; itself.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Subclasses should inherit from the class cluster’s abstract base class.&lt;/li&gt;
  &lt;li&gt;Subclass should define its own storage.&lt;/li&gt;
  &lt;li&gt;Subclass should override required methods of superclass.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Out of all these rules for subclassing, the second one is the most confusing to me. So let’s walk through another Pokemon example.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PokemonWater&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pokemon&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initWithPokemon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pokemon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pokemon&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PokemonWater&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;waterPokemonFromPokemon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pokemon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pokemon&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In implementation:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PokemonWater&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;initWithPokemon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pokemon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pokemon&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Defining own storage from Pokemon type by calling on the superclass
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// method for defining a Pokemon.
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pokemon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;personality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pokemon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;personality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PokemonWater&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;waterPokemonFromPokemon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pokemon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pokemon&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Again, defining own storage.
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PokemonWater&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithPokemon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pokemon&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Overall it looks like subclasses are more commonly used for implementing custom parts of a platform, and model objects. i.e. in view controllers when we subclass UIViewController; or building a UITableViewCell with custom layout. Any time something can be more reusable across other parts of the project seem to be a good opportunity to subclass.&lt;/p&gt;

&lt;p&gt;Until next time. Back to work!&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Feb 2018 23:20:26 -0800</pubDate>
        <link>http://localhost:4000/obj-c/2018/02/04/Subclassing-and-Alternatives.html</link>
        <guid isPermaLink="true">http://localhost:4000/obj-c/2018/02/04/Subclassing-and-Alternatives.html</guid>
        
        
        <category>Obj-C</category>
        
      </item>
    
      <item>
        <title>Quibbles</title>
        <description>&lt;p&gt;I need to learn about ‘Message Forwarding and Method Swizzling’ today, but I just have to share a few quotes I’m reading from what is becoming my favorite book so far.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;All the Light We Cannot See&lt;/em&gt; has captivated my imagination and attention. Anthony Doerr has a way with words that captures all senses succinctly to paint an imagery as if I’m there with the characters he’s describing, living out the plot in real time as I read.&lt;/p&gt;

&lt;p&gt;In the book, a young girl who became blind experiences the world the way she knows how: through sound logic, reason, and the ability to accept her fears and see the world her own way.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The faintly metallic smell of the falling snow surrounds her. &lt;em&gt;Calm yourself. Listen.&lt;/em&gt;” - Anthony Doerr&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Too often I’m lost in the depths of my thoughts when all I need to do is take a deep breath, and take the next step forward. Here, Marie-Laure is learning how to walk with her cane. Every week her father challenges her to lead them home, and every week she gets a little better despite her frustrations and disbelief she can. Little by little, week after week she makes progress until she eventually and finds her way.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“In another half second her father’s hands are in her armpits, swinging her up, and Marie-Laure smiles, and he laughs a pure, contagious laugh, one she will try to remember all her life, father and daughter turning in circles on the sidewalk in front of their apartment house, laughing together while snow sifts through the branches above.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve fallen in love with Marie-Laure. A little girl who has all the patience in the world it seems, with a loving father who is determined to stay by her side and give her the tools to live her life the way she can. Moments like these make me fill me with warm and fuzzies. The best moments.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;“Open your eyes…and see what you can with them before they close forever.”&lt;/em&gt; - Anthony Doerr&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here’s to continuing to explore and learn; to keep plodding along. Despite the increasingly long hours I spend at work it’s honestly so exciting to see how we breathe life into a product. I feel extremely grateful to be a part of the grueling process to make something that’s so carefully researched and thought out. As for our deadline, we’ll see whether we can make it. When our deadline is set won’t determine what I’ll accomplish. I can only control what I do every day - step after step, task after task, and how I challenge myself to move faster, improve, and learn more.&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Jan 2018 23:20:26 -0800</pubDate>
        <link>http://localhost:4000/quibbles/2018/01/28/Quibbles.html</link>
        <guid isPermaLink="true">http://localhost:4000/quibbles/2018/01/28/Quibbles.html</guid>
        
        
        <category>Quibbles</category>
        
      </item>
    
      <item>
        <title>Back to Basics with Property Attributes</title>
        <description>&lt;p&gt;Some things that seem obvious to others, to me need to be studied more thoroughly. One such topic I want to focus on this week is properties.
But why Objective-C? Mainly because that’s the language we use at Facebook to build our app. And also because I want to better understand why we choose to use Objective-C rather than the ‘sexier’ Swift language.&lt;/p&gt;

&lt;p&gt;Properties are thought of as accessors to a variable in a data object.&lt;/p&gt;

&lt;p&gt;@synthesize: controls name of instance variable.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pokemon&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@synthesize&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_myType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@synthesize&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_myName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Usually we would just let the compiler automatically write the code for these methods (ie. autosynthesis). For example, the two instance variables above would instead be &lt;code class=&quot;highlighter-rouge&quot;&gt;_type&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;_name&lt;/code&gt; with autosynthesis.&lt;/p&gt;

&lt;p&gt;To prevent the compiler from synthesizing an accessor method we can use @dynamic. This tells the compiler to not create an instance variable and accessor. Instead the compiler trusts us that the variable will be available at runtime:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pokemon&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@dynamic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Property Attributes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For example: &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Atomicity&lt;/strong&gt;: By default accessors are locked to ensure atomicity.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Read/Write&lt;/strong&gt;: (readonly, readwrite) where only a getter is available for the former and a getter/setter available for the latter.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Memory-Management&lt;/strong&gt;: affects only the setter
    &lt;ul&gt;
      &lt;li&gt;assign: used for scalar types like CGFloat or NSInteger&lt;/li&gt;
      &lt;li&gt;strong: the property defines an owning relationship. I wonder if I can make this analogy. Let’s say we have six Pokemon on hand and we catch a seventh one: Gulpin. Because we are required to hold six Pokemon at all time, we first “retain” Gulpin, “release” Caterpie and set Guplin as our new sixth Pokemon. Similar to a &lt;strong&gt;strong&lt;/strong&gt; semantic when a new value is set we first retain it, release the old value, and then set the new value.&lt;/li&gt;
      &lt;li&gt;weak: property defines a nonowning relationship. When a new value is set, the new value is not retained and the old value is not released. The main difference between weak and assign is that a weak property’s value will have nilled out if the object it’s defined as is ever destroyed. (Hm I guess the Pokemon analogy doesn’t work at all. Will need to think more otherwise I’ll just be confusing myself. Shall update later).&lt;/li&gt;
      &lt;li&gt;unsafe_unretained: same as assign but indicates a nonowning relationship (unretained) that’s not nilled out (unsafe) when the target is destroyed&lt;/li&gt;
      &lt;li&gt;copy: owning relationship like strong but rather than retaining value, it copies the value. Usually used for NSString* or mutable objects to preserve encapsulation.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Method Names&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;getter=&lt;name&gt;: usually used for Bool properties to define getter name.
&lt;/name&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;didLearn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;learn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;setter=&lt;name&gt;: specifies setter name. Not usually used.&lt;/name&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Definitions I need to remember&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;To be &lt;strong&gt;Statically allocated&lt;/strong&gt; means that memory is allocated at compile time.&lt;/li&gt;
  &lt;li&gt;A &lt;strong&gt;runtime&lt;/strong&gt; is like the baker at a bakery that grabs all the ingredients (data structure, functions, memory-management methods, etc.) to mix together and bake a cake (aka the library that code is linked to to run).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Objective-C discovers object type at runtime and can be described as a messaging structure with dynamic binding.&lt;/p&gt;

&lt;p&gt;Let’s break that sentence down: Messaging structure uses dynamic binding, meaning the runtime decides which code gets executed. (Whereas languages like python has function calling which decides which code will be executed. I think?).&lt;/p&gt;

&lt;p&gt;Need to finish this up later. Time to grocery shop!&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Jan 2018 23:20:26 -0800</pubDate>
        <link>http://localhost:4000/obj-c/2018/01/21/Back-to-Basics-Properties.html</link>
        <guid isPermaLink="true">http://localhost:4000/obj-c/2018/01/21/Back-to-Basics-Properties.html</guid>
        
        
        <category>Obj-C</category>
        
      </item>
    
      <item>
        <title>Ideas to Research</title>
        <description>&lt;p&gt;Fun fact of the day: according to Pew Research Center, 77% of Americans own a smartphone of some kind. It’s more than doubled since 2011, where only 35% of Americans owned a smartphone:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/smartphone_ownership.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yay for app development? Topics I want to look more into to explore and do in my free time, if ever I find myself sitting around at home:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Objective-C Patterns and Best Practices: focus on a topic to research into with various use cases. I can finally take advantage of the books I bought to help with this:
    &lt;ul&gt;
      &lt;li&gt;Memory Management&lt;/li&gt;
      &lt;li&gt;App lifecycles&lt;/li&gt;
      &lt;li&gt;Facebook technologies (GraphQL, ComponentKit)&lt;/li&gt;
      &lt;li&gt;Design patterns: Listener/Announcer, Protocols&lt;/li&gt;
      &lt;li&gt;Basic object-oriented programming ideas&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Explore various AR app ideas
    &lt;ul&gt;
      &lt;li&gt;Premise: I recently did a fun AR app that seemed to draw people closer together by having them experience Pokemon at the same time. However it relied on providing a smartphone with a pre-downloaded app. I wonder when we’ll replace our smartphone reliance?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Graphics
    &lt;ul&gt;
      &lt;li&gt;Replicate a scene from Piper (https://fburl.com/b14u4io8)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;App ideas:
    &lt;ul&gt;
      &lt;li&gt;Sample componentKit app to build up components knowledge.&lt;/li&gt;
      &lt;li&gt;Fun compliments storage app.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 13 Jan 2018 23:20:26 -0800</pubDate>
        <link>http://localhost:4000/projects/2018/01/14/Ideas-to-Research.html</link>
        <guid isPermaLink="true">http://localhost:4000/projects/2018/01/14/Ideas-to-Research.html</guid>
        
        
        <category>Projects</category>
        
      </item>
    
      <item>
        <title>Next Steps</title>
        <description>&lt;p&gt;Ever since I moved back to California, I’ve been itching to find something fulfilling to do in my free time. I want the knowledge I have and am learning to be useful for others and myself. I want to figure out how to best help others with what I know.&lt;/p&gt;

&lt;p&gt;It’s always this question of how to best use what I know to help others that sits in my mind. How do I determine the correct balance between giving back, and taking the time for myself to develop more substantial knowledge and skills? I aim to always be a life-long learner and teacher, but I often find myself asking - what’s the most optimal route to take?&lt;/p&gt;

&lt;p&gt;I need to set aside time to reflect more often and compile what I have learned together with the prospect of answering these questions; it is too easy to fall into the habit of taking what I have for granted. I need to remember how grateful I am for being able to afford to live in the Bay area, how grateful I am to be working for one of the top companies in my field, with one of the best teams, and on one of the most exciting projects. I am grateful for being able to learn more and improve myself, every day. I am grateful.&lt;/p&gt;

&lt;p&gt;And yet I constantly find myself complaining about the traffic, the lack of affordable housing, the tech bubble that seems suffocating at times. But every moment I have no matter where I am is an opportunity to learn from others, and to become more inspired by others and their dreams. Being in the center of the tech industry, information overload occurs all the time with the vast amount of people and talent. But I should recognize that as an opportunity to take advantage of rather than complain and hide behind my insecurities of not knowing enough. I need to remember to keep moving forward and to continue to learn more from those around me.&lt;/p&gt;

&lt;p&gt;It’s easy to become lost in the flow of time; to be controlled by deadlines, team meetings, bugs filed, and pinging notifications. But the need to sit back and think about all I’ve done and learned is a higher priority.&lt;/p&gt;

&lt;p&gt;Here’s to taking control of time.&lt;/p&gt;

&lt;p&gt;What’s next? A journal to keep track of lessons learned; what I’m reading, and how to apply it to improving my daily life. What I’ve learned from the book I’m currently reading is to set deadlines for myself to keep myself honest. Dan Ariely describes in &lt;em&gt;Predictably Irrational&lt;/em&gt; how I should expect my future self to procrastinate. Thus to combat my future self my present self needs to provide a strict deadline to keep up with.&lt;/p&gt;

&lt;p&gt;Here’s to beginning to update my website once a week every Sunday morning. Hats off to another chapter.&lt;/p&gt;

&lt;p&gt;Cheerios,
Sarah&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Jan 2018 23:20:26 -0800</pubDate>
        <link>http://localhost:4000/reflections/2018/01/13/Next-steps.html</link>
        <guid isPermaLink="true">http://localhost:4000/reflections/2018/01/13/Next-steps.html</guid>
        
        
        <category>Reflections</category>
        
      </item>
    
      <item>
        <title>Gotta Catch 'em All</title>
        <description>&lt;p&gt;It’s been a while since I’ve posted and I feel I owe it to myself to explain what I’ve been up to in order to figure out if I can prevent such a long delay from occurring again. A lot has happened in the past few weeks since I last worked on my side project. Unfortunately I was in the middle of writing a post describing learning about dialectrics that work got much busier than expected. A good busy of course! My project proposal at work was approved and I had to juggle defining the vision of the new project, being team lead, teaching scrum master responsibilities to the next scrum master, and developing for both projects I was in charge of.&lt;/p&gt;

&lt;p&gt;The really awesome part though, was that I was also able to continue an Pokemon augmented reality project I’d been working on with two others at work; first as an event for IBM’s “Take Your Kid’s to Work Day,” then at talks for local charter schools, and just this past Tuesday, at &lt;a href=&quot;http://sxswedu.com/expo&quot;&gt;SXSW’s Education Exposition&lt;/a&gt; by participating in &lt;a href=&quot;https://www.tealsk12.org/&quot;&gt;TEALS’ Science Fair&lt;/a&gt;. TEALS stands for Technology Education and Literacy in Schools and helps promote computer science education courses in high schools. A huge passion of mine is to encourage and drive STEM education for K-12 public schools because I believe access to STEM drives more opportunities. STEM is growing at a rapid pace, and we need our future leaders, engineers, scientists, teachers and young professionals to be on the forefront of that change, earlier on. So what way is better than inspiring students into STEM through Pokemon? Makes it fun for both me and the audience.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pokemil/sxsw_edu_expo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I worked with a designer who provided the 3D models and animation, and another engineer who introduced me to coding augmented reality games with Unity and Vuforia SDK. I added a shader to the 3D models to make sure the objects looked more like cartoons; otherwise the color was slightly off. When I added a shader though, I realized how similar all of the concepts were to the Ray Tracing project I had picked up! Depending on the albedo, and the number of light sources, the color of the 3D object differed. Taking into account that we had only one light source, and that handy toon shaders could be imported into the Unity project, I was happy to find how more realistic the Pokemon looked after the shader was applied.&lt;/p&gt;

&lt;p&gt;Before a shader was applied:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pokemil/pikachu_preshader.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the shader was applied:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pokemil/pikachu_postshader.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Putting everything together with the animation the designer gave us, the image recognition of the vinyl print in order to display the 3D object (Pikachu), here’s one of the Pokemon we were able to show at the SXSW Education Exposition:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pokemil/ar_demo.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Overall the demo was a blast. We had three vinyl prints that represented three different Pokemon: Pikachu, Bulbasaur, and Mew. The students loved it, the parents loved it, the educators, after hearing my (and all the other IBM volunteers I was able to convince to come) spheal about how important AR could be within education, loved it. At first parents and educators were curious why we were at the exposition demonstrating a seemingly random AR game. However, augmented reality apps and games, similar to virtual reality, have the power to change how students will learn in the future.&lt;/p&gt;

&lt;p&gt;Imagine having similar icons to the vinyl print we created, placed in a textbook. A student points their phone into the textbook at the icon. The chapter is about animal cells and cell parts. Imagine students taking apart a cell, and discovering again what scientists had discovered in a lab, but in a classroom with their friends! Simply awe-inspiring. The concepts would be more intriguing as students would be relating to the experience first-hand, and hopefully as a result of being more intriguing, the idea behind the different parts of a cell would be better remembered. Of course, this is all from my perspective as an engineer and student. The actual implementation would be different, but the vision and goal to aim for is what I believe is unique.&lt;/p&gt;

&lt;p&gt;In terms of how we used the AR demo to encourage students towards STEM education, I asked students who were captivated by the Pokemon, what they want to build, what their favorite games were, what their favorite subjects were, and what they loved to do. I showed them how they could relate their passion for Pokemon, gaming, shopping, drawing, and marine biology to the AR game we made, and what we do at IBM. My main goal for attending and ensuring IBM had a presence at the SXSW Education Exposition, was to help students see that you don’t have to have the pre-conceived notion of an “engineering” or “science” mind to be an engineer or a creator. You don’t have to fit into any of the boxes people commonly portray programmers or computer scientists or innovators into. Instead, I wanted to help people see that everything is connected - and the passion to follow what you love, is the most important. (Aside from practicality and reality). The ability to dream and continue exploring was something I wanted to relate to everyone there.&lt;/p&gt;

&lt;p&gt;A 6-year old kid tried to peek behind the phone to see if Bulbasaur was hiding behind it. As he realized nothing was there, he looked back at the screen and yelped in delight again as he saw Bulbasaur again. He tried to hold out his hand to touch Bulbasaur, to locate where he was on the map; only to find his hand again with Bulbasaur in the background! He repeated the same actions again, and looked up in surprise. Right then and there, his look to me and the sparkle and hint at magic made all the hours I put into improving, debugging and testing the app, printing vinyl prints and coordinating volunteer efforts, worth it. Here’s to creating more magical moments for people to experience.&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Mar 2017 23:20:26 -0800</pubDate>
        <link>http://localhost:4000/reflections/projects/2017/03/12/Gotta-Catch-Em-All.html</link>
        <guid isPermaLink="true">http://localhost:4000/reflections/projects/2017/03/12/Gotta-Catch-Em-All.html</guid>
        
        
        <category>Reflections</category>
        
        <category>Projects</category>
        
      </item>
    
  </channel>
</rss>
